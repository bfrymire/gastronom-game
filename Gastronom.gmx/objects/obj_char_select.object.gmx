<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_create = 0;

// initiate variables
act[0] = 0;
act[1] = 0;
for(var i = 0; i &lt; 4; i++) {
       for(var ii = 0; ii &lt; 2; ii++) {
              // food_list[0,0] = hovered
              // food_list[0,1] = selected
              food_list[i,ii] = 0;
       }
       arm_place[i] = 0;
}
food_char_list[0] = "broccoli";
food_char_list[1] = "corn";
food_char_list[2] = "tofu";
food_char_list[3] = "donut";
selected_char = food_char_list[0];
arm_index = 0;

plate_x = room_width/2 - floor(sprite_get_width(spr_plate)/2);
plate_y = 190 + floor(sprite_get_height(spr_plate)/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// If can_create
if can_create = 1 {
       // show_message("Can create.");
       character = instance_create(room_width/2,-64,obj_player);
       character.state = "Intro";
       character.player_name = selected_char;
       instance_destroy();
}


// Player has control of arm

// food_list[0,0] = hovered
// food_list[0,1] = selected

if act[0] = 0 {
       arm_place[0] = mouse_x;
       if mouse_y &lt; 190 {
              arm_place[1] = 190;
       } else arm_place[1] = mouse_y;
       for(var i = 0; i &lt; 4; i++) {
              var center_sprite_x = floor(room_width/2+lengthdir_x(90,90*i));
              var center_sprite_y = floor(190+floor(sprite_get_height(spr_plate)/2)+lengthdir_y(90,90*i));
              if mouse_x = clamp(mouse_x,center_sprite_x-32,center_sprite_x+32) &amp;&amp; mouse_y = clamp(mouse_y,center_sprite_y-32,center_sprite_y+32) {
                     food_list[i,0] = 1;
                     if mouse_check_button_pressed(mb_left) {
                            food_list[i,1] = 1;                                     // make hoverted food selected
                            selected_char = food_char_list[i];                      // move over the food that is selected
                            arm_place[2] = center_sprite_x + lengthdir_x(90,120);   // arm x location want
                            arm_place[3] = center_sprite_y + lengthdir_y(90,120);   // arm y location want
                            act[0] = 1;                                             // move over to the next act
                            break;
                     }
              } else food_list[i,0] = 0;
       }
}

// Arm moving over to selected food
if act[0] = 1 {
       arm_place[0] += (arm_place[2] - arm_place[0]) * 0.15;
       arm_place[1] += (arm_place[3] - arm_place[1]) * 0.15;
       if point_distance(arm_place[0],arm_place[1],arm_place[2],arm_place[3]) &lt;= 3 {
              arm_place[0] = arm_place[2];
              arm_place[0] = arm_place[2];
       }
       if arm_place[0] = arm_place[2] &amp;&amp; arm_place[1] = arm_place[3] {
              arm_place[2] = room_width + 32;
              arm_place[3] = room_height + 32;
              act[1] = floor(room_speed * 0.75);
              act[0] = 2;
       }
}

// Arm pauses for a moment
if act[0] = 2 {
       if act[1] != 0 {
              act[1] -= 1;
       } else {
              arm_index = 1;
              act[1] = room_speed;
              act[0] = 3;
       }
}

// Arm clentches food and pauses for a second
if act[0] = 3 {
       if act[1] != 0 {
              act[1] -= 1;
       } else {
              arm_index = 1;
              act[1] = room_speed * 0.25;
              act[0] = 4;
       }
}

// Arm pulls food back
// Transition to the next room after a moment
if act[0] = 4 {
       if act[1] != 0 {
              act[1] -= 1;
       } else {
              // room transition
              act[0] = -1;
              can_create = 1;
              persistent = 1;
              // room_goto_next();
              room_goto(room0); // The name of this room might change, so expect an error...
       }
       arm_place[0] += (arm_place[2] - arm_place[0]) * 0.05;
       arm_place[1] += (arm_place[3] - arm_place[1]) * 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_1d(food_char_list); i++) {
       if food_list[i,1] = 0 || act[0] &lt; 3 {
              var place_x = room_width/2 + lengthdir_x(90,(360/array_length_1d(food_char_list))*i);
              var place_y = plate_y + lengthdir_y(90,(360/array_length_1d(food_char_list))*i);
              if food_list[i,0] = 1 {
                     // draw popup on hover
                     if act[0] = 0 {
                            draw_sprite(spr_player_popup,0,place_x - floor(sprite_get_width(spr_player_popup)/2),place_y - sprite_get_height(spr_player_popup) - 32);
                     }
              }
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw Food on Plate
draw_sprite(spr_plate,0,room_width/2-floor(sprite_get_width(spr_plate)/2),190);

for(var i = 0; i &lt; array_length_1d(food_char_list); i++) {
       if food_list[i,1] = 0 || act[0] &lt; 3 {
              switch(i) {
                     case 0:
                            var char_sprite = spr_broccoli;
                            var char_angle = 75;
                            break;
                     case 1:
                            var char_sprite = spr_corn;
                            var char_angle = 90;
                            break;
                     case 2:
                            var char_sprite = spr_tofu;
                            var char_angle = 90;
                            break;
                     case 3:
                            var char_sprite = spr_donut;
                            var char_angle = 90;
                            break;
              }
              var place_x = room_width/2 + lengthdir_x(90,(360/array_length_1d(food_char_list))*i);
              var place_y = plate_y + lengthdir_y(90,(360/array_length_1d(food_char_list))*i);
              if food_list[i,0] = 1 {
                     // draw the outline and popup on hover, else draw the outline
                     scr_draw_sprite_outline(char_sprite,0,place_x,place_y,1,1,char_angle,c_black,2);
                     if act[0] = 0 {
                            //draw_sprite(spr_player_popup,0,place_x - floor(sprite_get_width(spr_player_popup)/2),place_y - sprite_get_height(spr_player_popup) - floor(sprite_get_height(char_sprite)/2));
                     }
              // scr_char_shadow(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, shadow_length, max_alpha);
              } else scr_char_shadow(char_sprite,0,place_x,place_y+3,1,1,char_angle,5,39.7);
              //} else draw_sprite_ext(char_sprite,0,place_x+5,place_y+5,1,1,char_angle,c_black,0.25);
              draw_sprite_ext(char_sprite,0,place_x,place_y,1,1,char_angle,c_white,1);
       }
}

//draw_sprite(spr_player_popup,0,place_x - floor(sprite_get_width(spr_player_popup)/2),place_y - 5 - sprite_get_height(spr_player_popup));



// Draw Hand
//var arm_x = mouse_x+lengthdir_x(sprite_get_width(spr_arm)-sprite_get_xoffset(spr_arm),300);
//var arm_y = mouse_y+lengthdir_y(sprite_get_height(spr_arm)-sprite_get_yoffset(spr_arm),300);
if instance_exists(obj_controller) {
       if obj_controller.debug = 1 {
              draw_text(arm_place[0],arm_place[1]-35,string(arm_place[1]));
       }
}
draw_sprite_ext(spr_arm,arm_index,arm_place[0]+15,arm_place[1]+15,1,1,120,c_black,0.25);
draw_sprite_ext(spr_arm,arm_index,arm_place[0],arm_place[1],1,1,120,c_white,1);

// Draw "Select Player" banner
draw_sprite(spr_player_banner,0,room_width/2-floor(sprite_get_width(spr_player_banner)/2),32);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
