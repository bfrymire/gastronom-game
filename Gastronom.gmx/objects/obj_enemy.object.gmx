<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_virus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;     // Stopping animation

// All possible sprites
sprite_list[0] = spr_virus;
sprite_list[1] = spr_bacterium;
sprite_list[2] = spr_bacterium2;
sprite_list[3] = spr_bug;
sprite_list[4] = spr_cluster;

var list_number = floor(random(array_length_1d(sprite_list))); // Randomly selecting a number from sprite_list[]
enemy = list_number + 1;                                       // Selecting the enemy
sprite_index = sprite_list[list_number];                       // Selecting the sprite
image_index = floor(random(image_number));                     // Randomly selecting an image index

/// Initializing variables used for visuals and shooting
gun_type = choose("pistol","revolver","rifle","shotgun");
gun_sprite = asset_get_index("spr_" + string(gun_type));
bullet_sprite = spr_pistol_bullet_head;
eye_origin_x = x + lengthdir_x(sprite_get_width(sprite_index)/2,image_angle + 73.30);
eye_origin_y = y + lengthdir_y(sprite_get_width(sprite_index)/2,image_angle + 73.30);
gun_origin_x = x + lengthdir_x(21.2,image_angle + 360 - 19.29);
gun_origin_y = y + lengthdir_y(21.2,image_angle + 360 - 19.29);
gun_shoot_sound = snd_pistol;
gun_shoot_angle = 0;
bullet_number = random_range(10, 35);
bullet_speed = random_range(1, 3);

hp_max = floor(random(4)) + 1;
hp = hp_max;

// Tweening image_angle
tangle_want = 15;
tangle_dir = 1;

// Weapon system
ammo_max = 7;
ammo = ammo_max;
reload_time = 0;
reload_time_max = room_speed * 1;
gun_dir = 0;
can_shoot = 0;
shoot_time = 0;
// Previous shoot_time_max set by Stein
shoot_time_max = choose(room_speed * 0.45, room_speed * 0.3, room_speed * 0.5, 10);
// shoot_time_max = 15;     // Original shoot_time_max

/// Movement
switch (enemy) {
       case 1:
              move_speed = 1.2;
              move_speed_add = 0.3;
              break;
       case 2:
              move_speed = 0.2;
              move_speed_add = 0;
       case 3:
              move_speed = 2.7;
              move_speed_add = 0.3;
       case 4:
              move_speed = 1;
              move_speed_add = 0.5;
       case 5:
              move_speed = 1.6;
              move_speed_add = 0.3;
       default:
              move_speed = 1;
              move_speed_add = 0;
}
// Scaling up move_speed based on image_index
move_speed += move_speed_add * image_index;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destory if out of health
if hp &lt;= 0 {
    instance_destroy();
}

// Pointing gun
// Maybe look into changing this to the tip of the gun later
if instance_exists(obj_player) {
       if obj_player.hp &gt; 0 {
              gun_dir = point_direction(x,y,obj_player.x,obj_player.y);
       }
}

// Pew Pew
if can_shoot = 1 {
       can_shoot = 0;
       // audio_play_sound(gun_shoot_sound, 1, 0);      // Enemies can't make noise, it would be too much
       // scr_screen_shake_add(7,5);                    // Enemies can't shake the screen, it would be too much
       repeat (bullet_number) {
              var bullet = instance_create(x+lengthdir_x(sprite_get_width(gun_sprite)-sprite_get_xoffset(gun_sprite),gun_dir),y+lengthdir_y(sprite_get_height(gun_sprite)-sprite_get_yoffset(gun_sprite),gun_dir),obj_bullet);
              bullet.direction = gun_dir - (gun_shoot_angle * 0.5) + random(gun_shoot_angle);
              bullet.speed = bullet_speed;
              bullet.creator = object_get_name(object_index);
              bullet.sprite_index = bullet_sprite;
              bullet.damage = 1;
       }
       if gun_type != "revolver" or gun_type != "shotgun" {
              var casing = instance_create(x,y,obj_casing);
              casing.direction = floor(random(360));
              casing.speed = random(5) + 0.1;
       }
} else {
       shoot_time += 1;
       if shoot_time &gt;= shoot_time_max {
              shoot_time = 0;
              can_shoot = 1;
       }
}

// Movement towards player if they exist
if instance_exists(obj_player) {
    if obj_player.hp &gt; 0 {
        mp_potential_step(obj_player.x, obj_player.y, move_speed, 0);
    } else mp_potential_step(x, room_height+250, move_speed, 0);
} else {
       mp_potential_step(x, room_height+250, move_speed, 0);
       if y &gt;= room_height + 250 {
              instance_destroy();
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.creator != object_get_name(object_index) {
       if instance_exists(obj_controller) {
              obj_controller.stats_shots_hit += 1;
              obj_controller.stats_damage_dealt += other.damage;
       }
       hp -= other.damage;
       with (other) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Deciding which way the Character is going to face

var eyes_sprite = spr_eyes;

// Change facing direction
if instance_exists(obj_player) {
       if obj_player.x &gt; x {
              image_xscale = 1;
       } else image_xscale = -1;
}

// Deciding image_yscale of the gun
if gun_dir &lt; 90 || gun_dir &gt; 270 {
    var gun_yscale = 1;
} else var gun_yscale = -1;

// Draw outline only, then Character sprite
scr_draw_sprite_outline(sprite_index,0,x,y,image_xscale,1,image_angle,c_black,2);
draw_sprite_ext(sprite_index,0,x,y,image_xscale,1,image_angle,c_white,1);

// Drawing eyes
draw_sprite_ext(eyes_sprite,0,eye_origin_x,eye_origin_y,image_xscale,1,image_angle,c_white,1);

// Drawing Gun
draw_sprite_ext(gun_sprite,0,gun_origin_x,gun_origin_y ,1,gun_yscale,gun_dir,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
