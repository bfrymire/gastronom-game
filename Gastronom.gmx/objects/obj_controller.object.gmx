<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>debug = false; // Testing only, make debug = -1 to disable debugging mode
randomize(); // Randomize seed
sound_volume(all, 0.5); // Force lower volume during testing

// Play looping music
// I think this should be put at the beginning of the game level
// audio_play_sound(snd_ouroboros, 1, 1);

/*menu_level[0] = 0;   // Current menu level
menu_level[1] = 0;   // Menu index you were on before going into a submenu level
menu_level[3] = 0;   // This will save the previous menu_level[0] once going to a sub_level

volume_master = 1;   // Volume level of all sounds
volume_music = 1;    // Volume level for just music
volume_sound = 1;    // Volume level for just sound effects
volume_mute = 0;     // Boolean for muting all sounds*/

room_speed = 60;     // 60 FPS

// Creating walls
if room = room0 {
       var wall = instance_create(0,0,obj_wall);
       wall.image_yscale = room_height / sprite_get_height(wall.sprite_index);
       var wall = instance_create(room_width-sprite_get_width(spr_wall),0,obj_wall);
       wall.image_yscale = room_height / sprite_get_height(wall.sprite_index);
}

// Screen shake
screen_shake_time = 0;
screen_shake_amount = 0;

// Background variables
go_bg_alpha = 0;

// Button Hovers
can_button_hover = 0;
button_time = 0;

// Stats to show on Game Over screen
stats = ds_map_create();
stats[? "shots_fired"] = 0;
stats[? "shots_hit"] = 0;
stats[? "time_alive"] = 0;
stats[? "wave"] = 1;
stats[? "damage_dealt"] = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Debugging
if keyboard_check(vk_control) {
       if keyboard_check_pressed(ord("D")) {
            if debug {
                debug = false;
            } else {
                debug = true;
            }
       }
       if debug {
              if keyboard_check_pressed(ord("P")) {
                     // Print screen goes here
                     screen_save(working_directory + "\Screens\Screen"+".png")
                     //scr_screenshot();
              }
              if keyboard_check_pressed(ord("F")) {
                  if window_get_fullscreen() = true {
                         window_set_fullscreen(false);
                  } else window_set_fullscreen(true);
              }
               // Game end
               if keyboard_check_pressed(ord("W")) {
                    game_end();
               }
               if keyboard_check_pressed(ord("R")) {
                    if keyboard_check(vk_shift) {
                        // Restart game
                        game_restart();
                    } else {
                        // Restart room
                        room_restart();
                    }
               }
               
               if instance_exists(obj_player) {
                      if keyboard_check(vk_right) {
                             if obj_player.hp &lt; obj_player.hp_max {
                                    obj_player.hp += 1;
                             }
                      }
                      if keyboard_check(vk_left) {
                             if obj_player.hp &gt; 0 {
                                    obj_player.hp -= 1;
                             }
                      }
                      if keyboard_check_pressed(ord("C")) &amp;&amp; obj_player.can_get_hit = 1 {
                             obj_player.can_get_hit = 0;
                      }
               }
       }
}

if mouse_check_button(mb_right) {
       if keyboard_check(vk_control) {
              room_speed = 120;
       } else {
            room_speed = 20;
       }
} else {
    room_speed = 60;
}

/*
menu_level[0] = 0;   // Current top menu level
menu_level[1] = 0;   // Current sub menu level

volume_master = 1;   // Volume level of all sounds
volume_music = 1;    // Volume level for just music
volume_sound = 1;    // Volume level for just sound effects
volume_mute = 0;     // Boolean for muting all sounds
*/

// Game Room
if room = room0 {
       if !audio_is_playing(snd_ouroboros) {
              // audio_play_sound(snd_ouroboros,0,1);
       }
       if instance_exists(obj_player) {
              if obj_player.hp &gt; 0 &amp;&amp; (obj_player.state != "Dead" || obj_player.state != "Intro" || obj_player.state != "Begin_Intro") {
                     stats[? "time_alive"] += 1;
              }
              if obj_player.state = "Dead" &amp;&amp; obj_player.y &lt;= -64 {
                     // Starting to display background
                     if go_bg_alpha &lt; 1 {
                            go_bg_alpha += 0.05;
                     } else {
                            // Put button actions here
                            if go_bg_alpha &gt; 0 {
                                   if mouse_x = clamp(mouse_x,room_width/2-sprite_get_width(spr_retry)/2,room_width/2+sprite_get_width(spr_retry)/2) &amp;&amp; mouse_y = clamp(mouse_y,425,425+sprite_get_height(spr_retry)) {
                                          can_button_hover = 1;
                                          if mouse_check_button_pressed(mb_left) {
                                                 if instance_exists(obj_player) {
                                                        obj_player.state = "Begin_Intro";
                                                 }
                                                stats[? "shots_fired"] = 0;
                                                stats[? "shots_hit"] = 0;
                                                stats[? "time_alive"] = 0;
                                                stats[? "wave"] = 1;
                                                stats[? "damage_dealt"] = 0;
                                                 instance_destroy(obj_enemy);
                                                 instance_destroy(obj_bullet);
                                                 instance_destroy(obj_casing);
                                                 instance_destroy(obj_combat_text);
                                                 audio_play_sound(snd_select,0,0);
                                                 can_button_hover = 0;
                                                 go_bg_alpha = 0;
                                          }
                                   } else {
                                        can_button_hover = 0;
                                   }
                            }
                     }
              }
       }
}

// Screen shake
if screen_shake_time &gt; 0 {
       screen_shake_time -= 1;
       view_xview[0] = -screen_shake_amount+floor(random(screen_shake_amount * 2));
       view_yview[0] = (-screen_shake_amount+floor(random(screen_shake_amount * 2)))/2;
} else {
       view_xview[0] = 0;
       view_yview[0] = 0;
}

// Mouse_over Buttons
if can_button_hover = 1 {
       button_timer += 1;
       if button_timer = 1 {
              audio_play_sound(snd_hover,0,0);
       }
} else {
    button_timer = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Drawing Player HUD

draw_sprite(spr_cursor,0,mouse_x,mouse_y);

if instance_exists(obj_player) {
       // Drawing Health
       /*var lollipop_xscale = -1;
       for(var i = 0; i &lt; obj_player.hp; i++) {
              // double check this, I might be adding padding before the sprite is drawn
              // do the same for the bullets
              draw_sprite(spr_hud_heart,0,view_xview[0]+11+(sprite_get_width(spr_hud_heart)*i)+(2*i),view_yview[0]+12);
              lollipop_xscale *= -1;
              draw_sprite(spr_lollipop,0,view_xview[0]+11+(sprite_get_width(spr_hud_heart)*i)+(2*i),view_yview[0]+12);
       }*/
       // var half_hp = floor(obj_player.hp*0.5) + 1;
       for(var i = 0; i &lt; floor(obj_player.hp * 0.5) + 1; i++) {
              if i != floor(obj_player.hp * 0.5) {
                     draw_sprite(spr_hud_heart,0,view_xview[0]+11+(sprite_get_width(spr_hud_heart)*i)+(2*i),view_yview[0]+12);
              } else {
                draw_sprite_part(spr_hud_heart,0,0,0,sprite_get_width(spr_hud_heart) * (obj_player.hp * 0.5 mod 1),sprite_get_height(spr_hud_heart),view_xview[0]+11+(sprite_get_width(spr_hud_heart)*i)+(2*i),view_yview[0]+12);
              }
       }
       scr_draw_text_outlined(view_xview[0]+11,view_yview[0]+12+32,"hp: " + string(obj_player.hp),1);
       scr_draw_text_outlined(view_xview[0]+11,view_yview[0]+12+64,"modified hp: " + string(floor(obj_player.hp*0.5)+1),1);
       //Drawing Bullets 17x19
       for(var i = 0; i &lt; obj_player.ammo; i++) {
              var bullet_draw_x = view_xview[0]+17+sprite_get_xoffset(obj_player.hud_bullet_sprite);
              var bullet_draw_y = view_yview[0]+view_hview[0]-20-sprite_get_yoffset(obj_player.hud_bullet_sprite)-(sprite_get_height(obj_player.hud_bullet_sprite)*i)-(9*i);
              draw_sprite(obj_player.hud_bullet_sprite,0,bullet_draw_x,bullet_draw_y);
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Enabling views
/*
if !view_enabled {
       view_visible[0] = true;
       view_enabled = 1;
       // view_wview[0] = 450;
       // view_hview[0] = 650;
       // view_wview[0] = 1024;
       // view_hview[0] = 576;
       view_xview[0] = 0;
       view_yview[0] = 0;
}*/

// Game Over screen
if go_bg_alpha &gt; 0 {
       draw_set_alpha(go_bg_alpha);
       draw_set_color(make_color_rgb(64,64,64));
       draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_wview[0],view_yview[0]+view_hview[0],0);
       draw_set_color(c_black);
       draw_set_alpha(1);
       if go_bg_alpha = 1 {
              draw_sprite(spr_game_over,0,room_width/2-sprite_get_width(spr_game_over)/2,64);
              draw_set_color(c_white);
              draw_line(room_width/2,0,room_width/2,room_height);
              draw_set_font(fnt_candal20);
              draw_set_halign(fa_middle);
              var score_text = "";
              score_text += "Score: N/A#";
              score_text += "High Score: N/A";
              draw_text(room_width/2,200,string(score_text));
              var stats_text = "";
              stats_text[0] = "";
              stats_text[1] = "";
              stats_text[0] += "Run Time: #";
              var stats_seconds = string(floor(stats[? "time_alive"] / 60));
              if string_length(stats_seconds) = 1 {
                     stats_seconds = "0" + stats_seconds;
              }
              var stats_minutes = string(floor(stats[? "time_alive"] / 60 / 60));
              if string_length(stats_minutes) = 1 {
                     stats_minutes = "0" + stats_minutes;
              }
              stats_text[1] += stats_minutes + ":" + stats_seconds + "#";
              stats_text[0] += "Wave Reached: #";
              stats_text[1] += "Wave " + string(stats[? "wave"]) + "#";
              stats_text[0] += "Hit Accuracy: #";
              if stats[? "shots_fired"] &gt; 0 {
                     stats_text[1] += string(stats[? "shots_hit"] / stats[? "shots_fired"] * 100) + "%#";
              } else {
                stats_text[1] += "0%#";
              }
              stats_text[0] += "Total Damage Dealt: #";
              stats_text[1] += string(stats[? "damage_dealt"]);
              draw_set_halign(fa_right);
              draw_set_font(fnt_candal14);
              draw_text(room_width / 2 + 37, 300, string(stats_text[0]));
              draw_set_halign(fa_left);
              draw_text(room_width / 2 + 37, 300, string(stats_text[1]));
              draw_set_font(-1);
              draw_set_color(c_black);
              if mouse_x = clamp(mouse_x,room_width/2-sprite_get_width(spr_retry)/2,room_width/2+sprite_get_width(spr_retry)/2) &amp;&amp; mouse_y = clamp(mouse_y,425,425+sprite_get_height(spr_retry)) {
                     var set_index = 1;
              } else {
                set_index = 0;
              }
              draw_sprite(spr_retry, set_index, room_width / 2 - sprite_get_width(spr_retry) / 2, 425);
       }
}

// Debugging
if debug {
       var debug_text = "";
       debug_text += "// Debug Mode //" + "##";
       debug_text += "debug_text: " + string(debug) + "#";
       debug_text += "fps_real: " + string(fps_real) + "#";
       if instance_exists(obj_player) {
              debug_text += "obj_player.state: " + string(obj_player.state) + "#";
              debug_text += "gun_dir: " + string(obj_player.gun_dir) + "#";
              debug_text += "player_ammo: " + string(obj_player.ammo) + "#";
              debug_text += "player tweening: " + string(obj_player.image_angle) + " :: " + string(obj_player.tangle_want * obj_player.tangle_dir) + "#";
       }
       if instance_exists(obj_char_select) {
              for(i = 0; i &lt; 4; i++) {
                     debug_text += "arm_place[" + string(i) + "]: " + string(obj_char_select.arm_place[i]) + "#";
              }
       }
       debug_text += "num enemies: " + string(instance_number(obj_enemy)) + "#";
       debug_text += "room_name: " + string(room_get_name(room)) + "#";
       debug_text += "working dir: " + string(working_directory) + "#";
       draw_text(96, 10, debug_text);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
