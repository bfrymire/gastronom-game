<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_broccoli</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_controller_dodge</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_names[0] = "broccoli";
player_names[1] = "donut";
player_names[2] = "corn";
player_names[3] = "tofu";
player_name = player_names[irandom_range(0, array_length_1d(player_names) - 1)];

// Defining Character assets
scr_player_assets();

// Basic variables
move_speed = 4;
hp_max = 10;
hp = hp_max;

// Tweening image_angle
tangle_want = 15;
tangle_dir = 1;
can_tween = 0;

// Weapon system
ammo = ammo_max;
reload_time = 0;
reload_hud_alpha = 0;
can_shoot = 1;
shoot_time = 0;
gun_dir = 0;

// Other possible states: "Fall", "Land", "Jump", "Dead", "Intro"
state = "Begin_Intro";

// Temporary Invincibility after getting hit
can_get_hit = 1;
hit_time = 0;
hit_time_max = room_speed * 1; // change to after testing: room_speed * 0.5;
hit_flashes = 3; // Number of times the character will flash after hit

// Character Customization
eye_type = 0;

// Gun recoil
can_recoil = 0;
/* recoil[0,0] = 1; // recoil angle amount
recoil[0,1] = ; // recoil angle direction
recoil[1,0] = 125; // recoil angle max
recoil[1,1] = ; // recoil */
recoil_angle_max = 125;
recoil_amount = 0;
recoil_dir = 1;
recoil_max = 125;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if persistent {
    persistent = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Deciding which way the Character is going to face
if mouse_x &gt; x {
       image_xscale = 1;
} else {
       image_xscale = -1;
}

// Refreshing Character Assets
scr_player_assets();

// Restricting ammo
if ammo &gt; ammo_max {
       ammo = ammo_max;
}

// Intro State - When character is first spawned
if state = "Begin_Intro" {
       ammo = ammo_max;
       reload_time = 0;
       reload_hud_alpha = 0;
       can_shoot = 1;
       shoot_time = 0;
       hp = hp_max;
       x = room_width/2;
       y = -(floor(sprite_get_height(sprite_index) / 2) + 17);
       state = "Intro";
}
if state = "Intro" {
       y += move_speed * 0.75;
       if y &gt;= room_height * 0.5 {
              state = "Fall"
       }
}

// Falling State
if state = "Fall" {
       if keyboard_check(ord("W")) {
              y -= move_speed * 1.25;
              if y - sprite_get_height(sprite_index)/2 &lt; 0 {
                     y = sprite_get_height(sprite_index)/2;
              }
       }
       if keyboard_check(ord("S")) {
              y += move_speed * 0.75;
              if y + sprite_get_height(sprite_index)/2 &gt; room_height {
                     y = room_height - sprite_get_height(sprite_index)/2;
              }
       }
       if keyboard_check(ord("D")) {
                /*if !place_meeting(x+move_speed,y,obj_wall) {
                    x += move_speed;
                }*/
                if x + move_speed + floor(sprite_get_width(sprite_index)/2) &lt; room_width - 125 {
                     x += move_speed;
                } else {
                     //for( var i = 0 ; i &lt; move_speed; i++ ) {
                            x = room_width - 125 - floor(sprite_get_width(sprite_index)/2);
                     //}
                }
       }
       if keyboard_check(ord("A")) {
            if x - move_speed - floor(sprite_get_width(sprite_index)/2) &gt; 125 {
                     x -= move_speed;
                } else {
                     //for( var i = 0 ; i &lt; move_speed; i++ ) {
                            x = 125 + floor(sprite_get_width(sprite_index)/2);
                     //}
                }
       }
}

// Dead state
if hp &lt;= 0 {
       state = "Dead";
}
if state = "Dead" {
       if y &gt; -64 {
              y -= move_speed * 1.25;
              // room_goto_transition(rm_gameover, transition.fade, 60);
       }
}

// Testing - toggle tween
if keyboard_check_pressed(ord("T")) {
       if can_tween = 1 {
              can_tween = 0;
       } else can_tween = 1;
}

// Possible states: "Fall", "Land", "Jump", "Dead", "Intro", "Begin_Intro"
if state != "Land" &amp;&amp; state != "Dead" &amp;&amp; state != "Jump" {
       // Tweening Character sprite
       if can_tween = 1 {
              if image_angle = tangle_want * tangle_dir {
                     tangle_dir *= -1;
              }
              image_angle += ((tangle_want * tangle_dir) - image_angle) * 0.2;
       }
}

// Pointing gun
// Maybe look into changing this to the tip of the gun later
gun_dir = point_direction(x,y,mouse_x,mouse_y);

// Pew Pew
if state != "Begin_Intro" &amp;&amp; state != "Intro" &amp;&amp; state != "Dead" {
       if can_shoot = 1 {
              if mouse_check_button(mb_left) {
                     if ammo &gt; 0 {
                            if instance_exists(obj_controller) {
                                   obj_controller.stats[? "shots_fired"] += 1;
                            }
                            can_recoil = 1;
                            recoil_dir = 1;
                            recoil_amount = 0;
                            ammo -= 1;
                            can_shoot = 0;
                            audio_play_sound(gun_shoot_sound, 1, 0);
                            scr_screen_shake_add(7,5);
                            var gun_width = sprite_get_width(gun_sprite) - sprite_get_xoffset(gun_sprite);
                            var gun_height = sprite_get_height(gun_sprite) - sprite_get_yoffset(gun_sprite);
                            var bullet_place_x1 = gun_origin_x + lengthdir_x(gun_width,gun_dir);
                            var bullet_place_y1 = gun_origin_y + lengthdir_y(gun_width,gun_dir);
                            var bullet_place_x2 = bullet_place_x1 + lengthdir_x(floor(sprite_get_yoffset(gun_sprite)/2)+1,gun_dir+90*image_xscale);
                            var bullet_place_y2 = bullet_place_y1 + lengthdir_y(floor(sprite_get_yoffset(gun_sprite)/2)+1,gun_dir+90*image_xscale);
                            repeat (bullet_number) {
                                   var bullet = instance_create(bullet_place_x2,bullet_place_y2,obj_bullet);
                                   bullet.direction = gun_dir - (gun_shoot_angle * 0.5) + random(gun_shoot_angle);
                                   bullet.speed = bullet_speed;
                                   bullet.creator = object_get_name(object_index);
                                   bullet.sprite_index = bullet_sprite;
                                   bullet.damage = 1;
                            }
                            if gun_type != "revolver" {
                                   var casing = instance_create(gun_origin_x,gun_origin_y,obj_casing);
                                   casing.sprite_index = bullet_case;
                                   casing.direction = floor(random(360));
                                   casing.speed = random(5) + 0.1;
                            }
                     }
              }
       } else {
              shoot_time += 1;
              if shoot_time &gt;= shoot_time_max {
                     shoot_time = 0;
                     can_shoot = 1;
              }
       }
}

// Gun recoil animation
if can_recoil = 1 {
       if recoil_dir = 1 {
              recoil_amount += recoil_max / 3;
              if recoil_amount &gt;= recoil_max {
                     recoil_amount = recoil_max;
                     recoil_dir = -1;
              }
       } else {
              recoil_amount -= recoil_max / 15;
              if recoil_amount &lt;= 0 {
                     recoil_amount = 0;
                     can_recoil = 0;
                     recoil_dir = 1;
              }
       }
}

// Reloading if you run out of ammo in clip
if ammo = 0 {
       reload_time += 1;
       if reload_time = 1 {
              audio_play_sound(snd_reload, 1, 0);
              if gun_type = "revolver" {
                     repeat (ammo_max) {
                            var casing = instance_create(x,y,obj_casing);
                            casing.sprite_index = bullet_case;
                            casing.direction = floor(random(360));
                            casing.speed = random(5) + 0.1;
                     }
              }
       }
       if reload_time &gt;= reload_time_max {
              reload_time = 0;
              ammo = ammo_max;
              reload_hud_alpha = 1;
       }
} else {
       // Manual Reloading
       if keyboard_check_pressed(ord("R")) {
              if ammo != ammo_max {
                     ammo = 0;
              }
       }
       if reload_hud_alpha &gt; 0 {
              reload_hud_alpha -= 0.03;
       }
}

// Temporary invincibility after getting hit
if can_get_hit = 0 {
       hit_time += 1;
       if hit_time &gt;= hit_time_max {
              hit_time = 0;
              can_get_hit = 1;
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_get_hit = 1 {
       if other.creator != object_get_name(object_index) {
              can_get_hit = 0;
              hp -= other.damage;
              instance_destroy(other);
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_player_assets();

// Deciding which way the Character is going to face
if state != "Dead" {
       var eyes_sprite = spr_eyes;
       if mouse_x &gt; x {
              image_xscale = 1;
       } else {
            image_xscale = -1;
       }
} else {
       var eyes_sprite = spr_eyes_dead;
}

// Deciding image_yscale of the gun
if gun_dir &lt; 90 || gun_dir &gt; 270 {
       var gun_yscale = 1;
} else {
       var gun_yscale = -1;
}

// Character will falsh while invincible
if can_get_hit = 0 {
       var flash_mod = floor(hit_time_max / (hit_flashes)) + 1;
       if hit_time mod flash_mod &lt; flash_mod / 2 {
              can_draw_char = 0;
       } else can_draw_char = 1;
} else can_draw_char = 1;

if can_draw_char = 1 {
       scr_draw_sprite_outline(sprite_index,0,x,y,image_xscale,1,image_angle,c_black,2);          // Outline only
       draw_sprite_ext(sprite_index,0,x,y,image_xscale,1,image_angle,c_white,1);                  // Character sprite only
       // Drawing eyes
       // old eye code - draw_sprite_ext(eyes_sprite,0,x + (image_xscale * eye_origin_x),eye_origin_y,image_xscale, 1,image_angle,c_white,1);  // Eyes sprite only
       if eye_type = 0 {
              draw_sprite_ext(eyes_sprite,0,eye_origin_x,eye_origin_y,1,1,image_angle,c_white,1);        // Eyes sprite only
       } else {
            if eye_type = 1 {
              var eye;
            }
       }
       
       // Drawing eyes - Feature got ICED!!
       /*var eye_pos1_x = x+lengthdir_x(floor(sprite_get_width(sprite_index)*0.25),image_angle+90);
       var eye_pos1_y = y+lengthdir_y(floor(sprite_get_height(sprite_index)*0.25),image_angle+90);
       var eye_pos2_x = eye_pos1_x+lengthdir_x(floor(sprite_get_width(sprite_index)*0.25),image_angle+90);
       var eye_pos2_y = eye_pos1_y+lengthdir_y(floor(sprite_get_height(sprite_index)*0.25),image_angle+90);
       var eye_pos3_x = eye_pos2_x+lengthdir_x(floor(sprite_get_width(sprite_index)*0.25),image_angle+90);
       var eye_pos3_y = eye_pos2_y+lengthdir_y(floor(sprite_get_height(sprite_index)*0.25),image_angle+90);*/
       // Drawing **SPECIAL EYES** // Feature got ICED!!
       // draw_sprite(spr_eye,0,eye_pos3_x,eye_pos3_y);
       
       // Drawing Gun
       if state != "Flip" &amp;&amp; state != "Dead" {
              if reload_time != 0 {
                     gun_index = sprite_get_number(gun_sprite)-1;
              } else gun_index = 0;
              draw_sprite_ext(gun_sprite,gun_index,gun_origin_x,gun_origin_y ,1,gun_yscale,gun_dir+recoil_amount*image_xscale,c_white,1);
       }
}

// Drawing reload circle
if reload_time != 0 {
       // draw_sprite_ext(spr_hud_reload,0,x,y-floor(sprite_get_height(sprite_index)/2)-6,1,1,0,c_white,1);
       draw_sprite_ext(spr_hud_reload,(reload_time/reload_time_max)*sprite_get_number(spr_hud_reload),x,y-floor(sprite_get_height(sprite_index)/2)-6,1,1,0,c_white,1);
} else if reload_hud_alpha &gt; 0 {
       draw_sprite_ext(spr_hud_reload,sprite_get_number(spr_hud_reload)-1,x,y-floor(sprite_get_height(sprite_index)/2)-6,1,1,0,c_white,reload_hud_alpha);
}

if instance_exists(obj_controller) {
       if obj_controller.debug {
       
              //draw_text(x+32,y-32,string(hit_time_max) + " / " + string(hit_time));
              //if !can_get_hit draw_text(x+32,y-16,string(math));
              
              draw_set_color(c_white);
              
              var debug_text = "";
              debug_text += string(hit_time_max) + " / " + string(hit_time) + "#";
              if !can_get_hit {
                     debug_text += string(hit_time mod floor(hit_time_max / (hit_flashes * 2))+1) + "#";
              } else {
                    debug_text += "0#";
              }
              //debug_text += string((hit_time_max-hit_time) / (hit_time_max/hit_flashes)) + "#";
              //debug_text += string(hit_time mod hit_flashes) + "#"; // this worked... sort of...
              //debug_text += string(hit_time_max/hit_flashes) + "#";
              
              
              if debug_text != "" {
                     draw_text(x+32,y-32,string(debug_text));
              }
              
              draw_text(x+65,y,string(x));
              
              draw_set_color(c_black);
       }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
