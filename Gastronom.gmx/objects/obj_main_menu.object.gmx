<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Testing - Putting the window screen on the left screen
right_screen = 0;
if right_screen == 1 {
       window_set_position(2560+(1680/2)-floor(window_get_width())/2,64);
}

menu_state = "Main";
room_speed = 60;

// Button Hovers
button_play_index = 0;
button_options_index = 0;
button_quit_index = 0;
quit_time = 0;
options_height = 0;

// Menu states
menu_index = 0;
menu_grid[0,0] = "Main";
menu_grid[1,0] = 92;
menu_grid[2,0] = 0.05;
menu_grid[3,0] = c_black;
menu_grid[0,1] = "Options";
menu_grid[1,1] = 92;
menu_grid[2,1] = 0.35;
menu_grid[3,1] = c_black;

// Black bars
bar_height = 0;
bar_height_mult = menu_grid[2,menu_index];
bar_color = menu_grid[3,menu_index];
bar_color_prev = bar_color;

// Music volume level
volume_level[0,0] = "Music level"; // Volume level name
volume_level[1,0] = 1;// Music level
volume_level[2,0] = 0; // Music level is muted
volume_level[3,0] = 0; // Music level slider active
volume_level[4,0] = volume_level[1,0]; // Previous music level
volume_level[0,1] = "Sound level"; // Volume level name
volume_level[1,1] = 1; // Sound level
volume_level[2,1] = 0; // Sound level is muted
volume_level[3,1] = 0; // Sound level slider active
volume_level[4,1] = volume_level[1,1]; // Previous sound level

// Volume sliders for drawing
music_slider_width = 0;
music_slider_height = 0;
music_slider_x = 0;
music_slider_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Testing
if keyboard_check(vk_control) {
       if keyboard_check_pressed(ord("R")) {
              room_restart();
       }
}
if mouse_check_button(mb_right) {
       room_speed = 20;
} else room_speed = 60;

// Bar animations
if bar_height != menu_grid[1,menu_index] {
       bar_height += (menu_grid[1,menu_index] - bar_height) * menu_grid[2,menu_index];
}
if bar_color != menu_grid[3,menu_index] {
       bar_color = merge_colour(bar_color_prev,menu_grid[3,menu_index],min(bar_height,menu_grid[1,menu_index])/max(bar_height,menu_grid[1,menu_index]));
}

// Menu state button actions
if menu_index = 0 {
       if quit_time = 0 {
              // Play Button
              var play_button_y = 32 + sprite_get_height(spr_logo) + 80;
              if mouse_x = clamp(mouse_x,floor(room_width/2-265/2),floor(room_width/2+265/2)) &amp;&amp; mouse_y = clamp(mouse_y,play_button_y,play_button_y+82) {
                     if button_play_index = 0 {
                            button_play_index = 1;
                            audio_play_sound(snd_hover,0,0);
                     } else if button_play_index = 1 {
                            if mouse_check_button_pressed(mb_left) {
                                   button_play_index = 2;
                            }
                     } else if mouse_check_button_released(mb_left) {
                            button_play_index = 0;
                            audio_play_sound(snd_select,0,0);
                            // Go to game
                            if room_exists(room_next(room)) {
                                room_goto_next();
                            } else {
                                room_goto(0);
                            }
                     }
              } else button_play_index = 0;
              // Options Button
              if mouse_x = clamp(mouse_x,63+43,63+sprite_get_width(spr_options)) &amp;&amp; mouse_y = clamp(mouse_y,447,447+57) {
                     if button_options_index = 0 {
                            button_options_index = 1;
                            audio_play_sound(snd_hover,0,0);
                     } else if button_options_index = 1 {
                            if mouse_check_button_pressed(mb_left) {
                                   button_options_index = 2;
                            }
                     } else if mouse_check_button_released(mb_left) {
                            // Go to options menu
                            button_options_index = 0;
                            audio_play_sound(snd_select,0,0);
                            menu_index = 1;
                            bar_color_prev = bar_color;
                     }
              } else button_options_index = 0;
              // Quit Button
              if mouse_x = clamp(mouse_x,735,735+183) &amp;&amp; mouse_y = clamp(mouse_y,447,447+57) {
                     if button_quit_index = 0 {
                            button_quit_index = 1;
                            audio_play_sound(snd_hover,0,0);
                     } else if button_quit_index = 1 {
                            if mouse_check_button_pressed(mb_left) {
                                   button_quit_index = 2;
                            }
                     } else if mouse_check_button_released(mb_left) {
                            // Start exit game animation
                            button_quit_index = 0;
                            audio_play_sound(snd_select,0,0);
                            quit_time += 1;
                     }
              } else button_quit_index = 0;
       } else {
              quit_time += 1;
              if keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace) {
                     quit_time = 0;
              }
              if quit_time &gt;= room_speed * 1 {
                     game_end();
              }
       }
}
if menu_index = 1 {
       var options_height_want = 503;
       var options_width = 409;
       var options_x = floor(room_width/2-options_width/2)+1;
       var options_y = room_height-options_height;
       var padding_horizontal = 48;
       if options_height = options_height_want &amp;&amp; options_height_want != 0 {
              if mouse_check_button_pressed(mb_left) {
                     // Exit Options if you click outside of modal
                     if !(mouse_x = clamp(mouse_x,room_width/2-options_width/2,room_width/2+options_width/2) &amp;&amp; mouse_y = clamp(mouse_y,room_height-options_height_want,room_height)) {
                            menu_index = 0;
                            bar_color_prev = bar_color;
                            volume_level[3,0] = 0;
                            volume_level[3,1] = 0;
                     } else {
                            // Exit Options if you click the 'X' in the corner
                            // Put another clamp here...
                            
                            // Make music volume slider active
                            music_slider_width = sprite_get_width(spr_volume_slider);
                            music_slider_height = sprite_get_height(spr_volume_slider);
                            music_slider_x = options_x+options_width-padding_horizontal-sprite_get_width(spr_volume_slider);
                            music_slider_y = options_y+122+28-sprite_get_height(spr_volume_slider);
                            if mouse_x = clamp(mouse_x,music_slider_x,music_slider_x+sprite_get_width(spr_volume_slider)) &amp;&amp; mouse_y = clamp(mouse_y,music_slider_y,music_slider_y+sprite_get_height(spr_volume_slider)) {
                                   volume_level[3,0] = 1;
                                   volume_level[2,0] = 0;
                            }
                            // Mute if clicking music speaker
                            if mouse_x = clamp(mouse_x,music_slider_x-8-sprite_get_width(spr_volume),music_slider_x-8) &amp;&amp; mouse_y = clamp(mouse_y,music_slider_y,options_y+122+floor(string_height("MUSIC")/2+sprite_get_height(spr_volume)/2)) {
                                   if volume_level[2,0] = 1 &amp;&amp; volume_level[1,0] &gt; 0 {
                                          volume_level[2,0] = 0;
                                   } else if volume_level[2,0] = 0 &amp;&amp; volume_level[1,0] &gt; 0 {
                                          volume_level[2,0] = 1;
                                   } else if volume_level[2,0] = 1 &amp;&amp; volume_level[1,0] = 0 {
                                          volume_level[1,0] = 1;
                                   } else if volume_level[2,0] = 0 &amp;&amp; volume_level[1,0] = 0 {
                                          volume_level[1,0] = 1;
                                   }
                            }
                     }
              }
              // Exit Options if you press escape
              if keyboard_check_pressed(vk_escape) {
                     if volume_level[3,0] = 1 || volume_level[3,1] = 1 {
                            volume_level[3,0] = 0;
                            volume_level[3,1] = 0;
                     } else {
                            menu_index = 0;
                            bar_color_prev = bar_color;
                     }
              }
       }
       if volume_level[3,0] = 1 {
              volume_level[1,0] = (clamp(mouse_x,music_slider_x+16,music_slider_x+16+102)-music_slider_x-16)/102;
       }
       if volume_level[3,1] = 1 {
              volume_level[1,1] = (clamp(mouse_x,music_slider_x+16,music_slider_x+16+102)-music_slider_x-16)/102;
       }
       if mouse_check_button_released(mb_left) {
              volume_level[3,0] = 0;
              volume_level[3,1] = 0;
       }
       
       /* Music volume level
       volume_level[0,0] = "Music level"; // Volume level name
       volume_level[1,0] = 1;// Music level
       volume_level[2,0] = 0; // Music level is muted
       volume_level[3,0] = 0; // Music level slider active
       volume_level[4,0] = volume_level[1,0]; // Previous music level
       */

} else options_height_want = 0;
if options_height != options_height_want {
       options_height += (options_height_want - options_height) * menu_grid[2,1];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw black bars
draw_set_color(bar_color);
draw_rectangle(0,0,room_width,bar_height,0);
draw_rectangle(0,room_height,room_width,room_height+bar_height*-1,0);
var bar_height_ratio = min(bar_height,menu_grid[1,menu_index])/max(bar_height,menu_grid[1,menu_index]);

draw_set_color(c_white);
draw_text(mouse_x + 30,mouse_y - 30,string(volume_level[1,0]));

if menu_index != -1 {
       // Logo
       draw_sprite(spr_logo,0,floor(room_width/2-sprite_get_width(spr_logo)/2),32);
       
       // Display High Score
       draw_set_font(fnt_candal20);
       draw_set_color(c_white);
       draw_set_halign(fa_middle);
       draw_text(floor(room_width/2),32+sprite_get_height(spr_logo)+20,"High Score: " + "N/A");
       // Display Copyright
       draw_set_font(fnt_candal14);
       draw_sprite(spr_copyright,0,floor(room_width/2-string_width(" 2017 Twain")/2-sprite_get_width(spr_copyright)/2),room_height-72+floor(sprite_get_height(spr_copyright)/2)+2);
       draw_text(floor(room_width/2),room_height-72,"  2017 Twain#All rights reserved.");
       draw_set_halign(fa_left);
       draw_set_color(c_black);
       draw_set_font(-1);
       
       // Buttons
       var button_y_plus = 0;
       // Play Button
       if button_play_index = 2 {
              button_y_plus = 5;
       } else button_y_plus = 0;
       draw_sprite(spr_play,button_play_index,floor(room_width/2-sprite_get_width(spr_play)/2),32+sprite_get_height(spr_logo)+80+button_y_plus);
       // Options Button
       if button_options_index = 2 {
              button_y_plus = 5;
       } else button_y_plus = 0;
       draw_sprite(spr_options,button_options_index,63,447+button_y_plus);
       // Quit Button
       if button_quit_index = 2 {
              button_y_plus = 5;
       } else button_y_plus = 0;
       draw_sprite(spr_quit,button_quit_index,735,447+button_y_plus);
}
/*if menu_index = 1 {
       // OLD - Options menu start
       draw_set_font(fnt_candal20);
       draw_set_halign(fa_center);
       draw_set_color(c_white);
       draw_text(floor(room_width/2),32,"- Options -");
       draw_rectangle(32,32+string_height("- Options -")+32,room_width-32,room_height-32,1);
       draw_rectangle(32+1,32+string_height("- Options -")+32+1,room_width-32-1,room_height-32-1,1);
       // Regular options go here:
       draw_set_halign(fa_left);
} */

if options_height &gt; 0 {
       var surf_width = 409;
       var surf_width_half = floor(surf_width/2)+1;
       var surf_height = 503;
       var text_height = 0;
       var padding_horizontal = 48;
       var height_ratio = min(options_height,surf_height)/max(options_height,surf_height);
       var surf = surface_create(surf_width,surf_height);
       // Draw Options Modal Fade
       draw_set_color(c_black);
       draw_set_alpha(height_ratio * 0.6);
       draw_rectangle(0,0,room_width,room_height,0);
       draw_set_alpha(1);
       draw_set_color(c_white);
       draw_text(15,15,"Press Esc to go back.");
       // Draw Options Modal
       surface_set_target(surf);
       draw_clear_alpha(c_black,0);
       draw_sprite(spr_options_menu_top,0,0,0);
       draw_set_color(make_colour_rgb(64,64,64));
       draw_rectangle(0,sprite_get_height(spr_options_menu_top),surf_width,surf_height,0);
       // Draw exit button
       draw_sprite(spr_button_exit,0,surf_width-sprite_get_width(spr_button_exit)-12,12);
       // Draw "OPTIONS" text
       draw_set_halign(fa_center);
       draw_set_color(c_white);
       draw_set_font(fnt_strenuous40);
       text_height += 25;
       draw_text(floor(surf_width/2),text_height,"OPTIONS");
       text_height += string_height("OPTIONS") + 33;
       if obj_controller.debug {
           draw_set_color(c_red);
           draw_line(0,text_height,room_width,text_height);
           draw_set_color(c_white);
       }
       // Draw "MUSIC" text
       draw_set_halign(fa_left);
       draw_set_font(fnt_strenuous22);
       draw_text(padding_horizontal,text_height,"MUSIC");
       // Draw music slider
       var slider_width = 16+102*volume_level[1,0];
       var slider_height = sprite_get_height(spr_volume_slider);
       var slider_x = surf_width-padding_horizontal-sprite_get_width(spr_volume_slider);
       var slider_y = 122+28-slider_height;
       draw_sprite(spr_volume_slider,0,slider_x,slider_y);
       if volume_level[2,0] = 0 {
              draw_sprite_part(spr_volume_slider,1,0,0,slider_width,slider_height,slider_x,slider_y);
       }
       // Draw music speaker
       if volume_level[2,0] = 1 || volume_level[1,0] = 0 {
              var speaker_index = 0;
       } else speaker_index = (sprite_get_number(spr_volume)-1)*volume_level[1,0];
       draw_set_alpha(0.45);
       draw_sprite(spr_volume,speaker_index,slider_x-8-sprite_get_width(spr_volume),122+floor(string_height("MUSIC")/2-sprite_get_height(spr_volume)/2));
       draw_set_alpha(1);
       draw_sprite(spr_volume,speaker_index,slider_x-8-sprite_get_width(spr_volume),slider_y+sprite_get_height(spr_volume_slider)/2-sprite_get_height(spr_volume)/2);
       if speaker_index = 0 {
              draw_sprite(spr_volume_mute,0,slider_x-8-sprite_get_width(spr_volume),122+floor(string_height("MUSIC")/2-sprite_get_height(spr_volume_mute)/2));
       }
       draw_set_font(-1);
       draw_text(slider_x-96,slider_y+96,"volume_level[2,0]: " + string(volume_level[2,0]) + "#volume_level[1,0]: " + string(volume_level[1,0]));
       
       draw_set_color(c_red);
       draw_rectangle(slider_x-8-sprite_get_width(spr_volume),room_height-options_height+122+floor(string_height("MUSIC")/2)-floor(sprite_get_height(spr_volume)/2),slider_x-8,room_height-options_height+122+floor(string_height("MUSIC")/2)+floor(sprite_get_height(spr_volume)/2),1);
       
       surface_reset_target();
       draw_surface(surf,floor(room_width/2-surf_width/2),room_height-options_height);
       surface_free(surf);
}

// Draw cursor
scr_draw_sprite_outline(spr_cursor,0,mouse_x,mouse_y,1,1,1,c_black,2);
draw_sprite(spr_cursor,0,mouse_x,mouse_y);
if obj_controller.debug {
    draw_set_alpha(0.5);
    draw_set_color(c_red);
    draw_line(mouse_x,mouse_y-32,mouse_x,mouse_y+32);
    draw_line(mouse_x-32,mouse_y,mouse_x+32,mouse_y);
    draw_set_color(c_black);
    draw_set_alpha(1);
}

// Draw quit animation fading box
if quit_time &gt; 0 {
       draw_set_color(c_black);
       draw_set_alpha(quit_time / (room_speed * 1));
       draw_rectangle(0,0,room_width,room_height,0);
       draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
